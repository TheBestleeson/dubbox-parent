<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
  PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
  "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>
    <!--数据库驱动-->
    <classPathEntry    location="D:\repository\mysql\mysql-connector-java\8.0.13\mysql-connector-java-8.0.13.jar"/>
    <!--
    context:生成一组对象的环境
    id:必选，上下文id，用于在生成错误时提示
    defaultModelType:指定生成对象的样式
    特别说明 我的前面三个都不管用,不知道为啥
        1，conditional：类似hierarchical；
        2，flat：所有内容（主键，blob）等全部生成在一个对象中；
        3，hierarchical：主键生成一个XXKey对象(key class)，Blob等单独生成一个对象，其他简单属性在一个对象中(record class)
    targetRuntime:
        1，MyBatis3：默认的值，生成基于MyBatis3.x以上版本的内容，包括XXXBySample；
        2，MyBatis3Simple：类似MyBatis3，只是不生成XXXBySample；
    introspectedColumnImpl：类全限定名，用于扩展MBG
    -->
    <context id="mysql"    targetRuntime="MyBatis3">
        <property name="javaFileEncoding" value="UTF-8"/>
        <property name="beginningDelimiter" value="`"/>
        <property name="endingDelimiter" value="`"/>

        <!--序列化支持-->
        <!--<plugin type="org.mybatis.generator.plugins.SerializablePlugin"/>
        <plugin type="org.mybatis.generator.plugins.ToStringPlugin"/>
        <plugin type="org.mybatis.generator.plugins.ConstantPlugin"/>-->

        <commentGenerator>
            <property name="suppressDate" value="true"/>
            <property name="suppressAllComments" value="true"/>
        </commentGenerator>
        <!--数据库链接地址账号密码-->
        <jdbcConnection driverClass="com.mysql.cj.jdbc.Driver" connectionURL="jdbc:mysql://39.105.9.250:3306/fyc_usercenter" userId="root" password="fan720!">
        </jdbcConnection>

        <!-- java类型处理器
            用于处理DB中的类型到Java中的类型，默认使用JavaTypeResolverDefaultImpl；
            注意一点，默认会先尝试使用Integer，Long，Short等来对应DECIMAL和 NUMERIC数据类型；
        -->
        <javaTypeResolver>
            <!--
            true：使用BigDecimal对应DECIMAL和 NUMERIC数据类型
            false：默认,
                scale>0;length>18：使用BigDecimal;
                scale=0;length[10,18]：使用Long；
                scale=0;length[5,9]：使用Integer；
                scale=0;length<5：使用Short；
            -->
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>
        <!--生成Model类存放位置-->
        <javaModelGenerator targetPackage="test.model" targetProject="src">
            <property name="enableSubPackages" value="true"/>
            <property name="trimStrings" value="true"/>
        </javaModelGenerator>
        <!--生成映射文件存放位置-->
        <sqlMapGenerator targetPackage="test.mapping" targetProject="src">
            <property name="enableSubPackages" value="true"/>
        </sqlMapGenerator>
        <!--生成Dao类存放位置-->
        <javaClientGenerator type="XMLMAPPER" targetPackage="test.dao" targetProject="src">
            <property name="enableSubPackages" value="true"/>
        </javaClientGenerator>
        <!--生成对应表及类名-->
        <!-- 数据库          Catalog支持     Schema支持
            Oracle            不支持         用户名(User Id)
            MySQL             不支持         数据库名
            因为MySQL不支持catalog导致mysql-connector-java直接使用sechema代替catalog了.
            但是由于Mybatis要兼容众多数据库,所以在Mybatis配置中还是有分别有catalog和sechema两个配置项.
            key point 解决：Cannot obtain primary key information from the database, generated objects may be incomplete.
            key point （1）配置catalog,catalog="fyc_usercenter" 但这会多一层目录，mybatis会吧配置的catalog设置成当前目录。
            key point （2）直接告诉mybatis当前数据库不支持catalog,jdbc url+?nullCatalogMeansCurrent=true（但不会生成withBLOBs类）
            -->
        <table catalog="fyc_usercenter" tableName="user_info" domainObjectName="UserInfo" enableCountByExample="false" enableUpdateByExample="false" enableDeleteByExample="false" enableSelectByExample="false" selectByExampleQueryId="false">
            <!-- generatedKey用于生成生成主键的方法，
            如果设置了该元素，MBG会在生成的<insert>元素中生成一条正确的<selectKey>元素，该元素可选
            column:主键的列名；
            sqlStatement：要生成的selectKey语句，有以下可选项：
               Cloudscape:相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL()
               DB2       :相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL()
               DB2_MF    :相当于selectKey的SQL为：SELECT IDENTITY_VAL_LOCAL() FROM SYSIBM.SYSDUMMY1
               Derby      :相当于selectKey的SQL为：VALUES IDENTITY_VAL_LOCAL()
               HSQLDB      :相当于selectKey的SQL为：CALL IDENTITY()
               Informix  :相当于selectKey的SQL为：select dbinfo('sqlca.sqlerrd1') from systables where tabid=1
               MySql      :相当于selectKey的SQL为：SELECT LAST_INSERT_ID()
               SqlServer :相当于selectKey的SQL为：SELECT SCOPE_IDENTITY()
               SYBASE      :相当于selectKey的SQL为：SELECT @@IDENTITY
               JDBC      :相当于在生成的insert元素上添加useGeneratedKeys="true"和keyProperty属性
            -->
            <generatedKey column="ID" sqlStatement="MySql" identity="true"/>
        </table>
    </context>
</generatorConfiguration>